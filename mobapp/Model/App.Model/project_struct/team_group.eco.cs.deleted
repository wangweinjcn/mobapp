//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.34014
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace App.Model.project_struct {
  using System;
  using System.Collections;
  using System.Collections.Generic;
  using System.ComponentModel;
  using System.CodeDom.Compiler;
  using Eco.ObjectImplementation;
  using Eco.ObjectRepresentation;
  using Eco.Services;
  using Eco.Subscription;
  using Eco.UmlCodeAttributes;
  using Eco.UmlRt;
  
  
  [UmlElement(Id="ff056221-eb5e-440a-8f17-1d5b4d86154c")]
  public partial class team_group : App.Model.comm.base_class {
    
    #region *** Constructors ***
    
    [GeneratedCodeAttribute("ECO", "7.0.0.0")]
    public team_group(Eco.ObjectRepresentation.IEcoServiceProvider serviceProvider) : 
        base(serviceProvider) {
      try {
        this.ObjectCreated();
      }
      catch (System.Exception ) {
        this.Deinitialize(serviceProvider);
        throw;
      }
    }
    
    /// <summary>
    /// For framework internal use only
    /// Constructor public for one reason only; to avoid need for ReflectionPermission in reduced trust
    /// </summary>
    [GeneratedCodeAttribute("ECO", "7.0.0.0")]
    public team_group(Eco.ObjectImplementation.IContent content) : 
        base(content) {
      this.ObjectFetched();
    }
    
    /// <summary>
    /// Creates an Offline object. Can for example be used by MVC runtime to pass values
    /// This is type equivalent to the eco object in everyway - but has none of the eco services
    /// It does however implement INotifyPropertyChanged and INotifyCollectionChanged
    /// </summary>
    [GeneratedCodeAttribute("ECO", "7.0.0.0")]
    public team_group() {
      this.eco_Content = new EcoOfflineValues();
      this.ObjectCreated();
    }
    
    /// <summary>This method is called when the object has been created the first time (not when loaded from a db)</summary>
    partial void ObjectCreated();
    
    /// <summary>This method is called when the object has been loaded from a db (not when it is created the first time)</summary>
    partial void ObjectFetched();
    
    /// <summary>This method is called before the object is deleted. You can perform custom clean up or prevent the deletion by returning false or throw an exception (preferably EcoObjectDeleteException)</summary>
    partial void PreDelete(ref System.Boolean canDelete);
    
    #endregion *** Constructors ***
    
    #region *** ILoopback implementation ***
    
    [GeneratedCodeAttribute("ECO", "7.0.0.0")]
    public override void set_MemberByIndex(int index, object value) {
      switch(index) {
      case Eco_LoopbackIndices.name:
      this.name = ((string)(value));
        break;
      default:
      base.set_MemberByIndex(index, value);
        break;
      }
    }
    
    [GeneratedCodeAttribute("ECO", "7.0.0.0")]
    public override object get_MemberByIndex(int index) {
      switch(index) {
      case Eco_LoopbackIndices.name:
      return this.name;
      default:
      return base.get_MemberByIndex(index);
      }
    }
    
    #endregion *** ILoopback implementation ***
    
    #region *** LoopbackIndex declarations ***
    
    new public struct Eco_LoopbackIndices {
      
      public const int Eco_FirstMember = App.Model.comm.base_class.Eco_LoopbackIndices.Eco_MemberCount;
      
      public const int leadername = Eco_FirstMember;
      
      public const int name = (leadername + 1);
      
      public const int team_member = (name + 1);
      
      public const int team_group_member_role = (team_member + 1);
      
      public const int project = (team_group_member_role + 1);
      
      public const int leader = (project + 1);
      
      public const int team = (leader + 1);
      
      public const int Eco_MemberCount = (team + 1);
    }
    
    #endregion *** LoopbackIndex declarations ***
    
    [UmlElement(Id="3b220b7a-680f-4917-a931-5095904dfda9", Index=Eco_LoopbackIndices.leadername)]
    [UmlTaggedValue("derived", "True")]
    [UmlTaggedValue("Eco.DerivationOCL", "if self.leader->isempty then\r\n\'\'\r\nelse\r\nself.leader.username\r\nendif")]
    [GeneratedCodeAttribute("ECO", "7.0.0.0")]
    public string leadername {
      get {
        return ((string)(this.eco_Content.get_MemberByIndex_OfflineAware(Eco_LoopbackIndices.leadername, typeof(string))));
      }
    }
    
    [UmlElement(Id="57c65ab0-d65c-4ddd-9ede-e3d8e6cf56f9", Index=Eco_LoopbackIndices.name)]
    [UmlTaggedValue("Eco.HasUserCode", "True")]
    [GeneratedCodeAttribute("ECO", "7.0.0.0")]
    public string name {
      get {
        this.nameReading();
        string res = ((string)(this.eco_Content.get_MemberByIndex_OfflineAware(Eco_LoopbackIndices.name, typeof(string))));
        this.nameRead(ref res);
        return res;
      }
      set {
        string oldValue = this.name;
        string newValue = value;
        bool abortModification = false;
        this.nameChanging(ref value, ref abortModification);
        if (abortModification) {
          return;
        }
        this.eco_Content.set_MemberByIndex_OfflineAware(Eco_LoopbackIndices.name, ((object)(value)), "name");
        this.nameChanged(oldValue, newValue, value);
      }
    }
    
    [UmlElement("AssociationEnd", Id="4c20dd3c-e626-4e35-850e-1b3a57d22224", Index=Eco_LoopbackIndices.team_member)]
    [UmlMetaAttribute("association", typeof(project_structPackage.team_memberteam_memberteam_groupteam_group), Index=1)]
    [UmlMetaAttribute("multiplicity", "0..*")]
    [GeneratedCodeAttribute("ECO", "7.0.0.0")]
    public IEcoList<team_member> team_member {
      get {
        return ((IEcoList<team_member>)(this.eco_Content.get_MemberByIndex_OfflineAware(Eco_LoopbackIndices.team_member, typeof(IEcoList<team_member>))));
      }
    }
    
    public IEcoList<team_group_member_role> team_group_member_role {
      get {
        return ((IEcoList<team_group_member_role>)(this.eco_Content.get_MemberByIndex_OfflineAware(Eco_LoopbackIndices.team_group_member_role, typeof(IEcoList<team_group_member_role>))));
      }
    }
    
    [UmlElement("AssociationEnd", Id="7a3e24c8-0f00-4ac0-b7ae-c81b41ff3604", Index=Eco_LoopbackIndices.project)]
    [UmlMetaAttribute("association", typeof(project_structPackage.team_groupteam_groupprojectproject), Index=0)]
    [UmlMetaAttribute("multiplicity", "1")]
    [GeneratedCodeAttribute("ECO", "7.0.0.0")]
    public project project {
      get {
        return ((project)(this.eco_Content.get_MemberByIndex_OfflineAware(Eco_LoopbackIndices.project, typeof(project))));
      }
      set {
        this.eco_Content.set_MemberByIndex_OfflineAware(Eco_LoopbackIndices.project, ((object)(value)), "project");
      }
    }
    
    [UmlElement("AssociationEnd", Id="9ff453f4-1191-4e4a-b0d7-6350b0b90393", Index=Eco_LoopbackIndices.leader)]
    [UmlMetaAttribute("association", typeof(project_structPackage.userleaderteam_groupmyown_groups), Index=1)]
    [UmlMetaAttribute("multiplicity", "0..1")]
    [GeneratedCodeAttribute("ECO", "7.0.0.0")]
    public App.Model.comm.user leader {
      get {
        return ((App.Model.comm.user)(this.eco_Content.get_MemberByIndex_OfflineAware(Eco_LoopbackIndices.leader, typeof(App.Model.comm.user))));
      }
      set {
        this.eco_Content.set_MemberByIndex_OfflineAware(Eco_LoopbackIndices.leader, ((object)(value)), "leader");
      }
    }
    
    [UmlElement("AssociationEnd", Id="eea84e8e-2dac-4d3e-8dde-55ac08222a6f", Index=Eco_LoopbackIndices.team)]
    [UmlMetaAttribute("association", typeof(project_structPackage.teamteamteam_groupteam_group), Index=0)]
    [UmlMetaAttribute("multiplicity", "1")]
    [GeneratedCodeAttribute("ECO", "7.0.0.0")]
    public team team {
      get {
        return ((team)(this.eco_Content.get_MemberByIndex_OfflineAware(Eco_LoopbackIndices.team, typeof(team))));
      }
      set {
        this.eco_Content.set_MemberByIndex_OfflineAware(Eco_LoopbackIndices.team, ((object)(value)), "team");
      }
    }
    
    #region *** name partial methods ***
    
    /// <summary>This method is called before the attribute name is read</summary>
    partial void nameReading();
    
    /// <summary>This method is called after name is read. It is possible to change the value here.</summary>
    partial void nameRead(ref string value);
    
    /// <summary>This method is called before name is modified, it is possible to change the value that is stored here or abort the modification</summary>
    partial void nameChanging(ref string value, ref bool abortModification);
    
    /// <summary>This method is called after name is modified</summary>
    /// <param name="oldValue">This is the value that name had before the modification</param>
    /// <param name="newValue">This is the value that someone tried to set</param>
    /// <param name="finalValue">This is the value that name has after the modification</param>
    partial void nameChanged(string oldValue, string newValue, string finalValue);
    
    #endregion *** name partial methods ***
  }
}
