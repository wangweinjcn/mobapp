//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace App.Model.comm {
  using System;
  using System.Collections;
  using System.Collections.Generic;
  using System.ComponentModel;
  using System.CodeDom.Compiler;
  using Eco.ObjectImplementation;
  using Eco.ObjectRepresentation;
  using Eco.Services;
  using Eco.Subscription;
  using Eco.UmlCodeAttributes;
  using Eco.UmlRt;
  
  
  [UmlElement(Id="3ae899bf-fa72-464a-9079-b82abf1ca05c")]
  public partial class dept : App.Model.comm.basetree {
    
    #region *** Constructors ***
    
    [GeneratedCodeAttribute("ECO", "7.0.0.0")]
    public dept(Eco.ObjectRepresentation.IEcoServiceProvider serviceProvider) : 
        base(serviceProvider) {
      try {
        this.ObjectCreated();
      }
      catch (System.Exception ) {
        this.Deinitialize(serviceProvider);
        throw;
      }
    }
    
    /// <summary>
    /// For framework internal use only
    /// Constructor public for one reason only; to avoid need for ReflectionPermission in reduced trust
    /// </summary>
    [GeneratedCodeAttribute("ECO", "7.0.0.0")]
    public dept(Eco.ObjectImplementation.IContent content) : 
        base(content) {
      this.ObjectFetched();
    }
    
    /// <summary>
    /// Creates an Offline object. Can for example be used by MVC runtime to pass values
    /// This is type equivalent to the eco object in everyway - but has none of the eco services
    /// It does however implement INotifyPropertyChanged and INotifyCollectionChanged
    /// </summary>
    [GeneratedCodeAttribute("ECO", "7.0.0.0")]
    public dept() {
      this.eco_Content = new EcoOfflineValues();
      this.ObjectCreated();
    }
    
    /// <summary>This method is called when the object has been created the first time (not when loaded from a db)</summary>
    partial void ObjectCreated();
    
    /// <summary>This method is called when the object has been loaded from a db (not when it is created the first time)</summary>
    partial void ObjectFetched();
    
    /// <summary>This method is called before the object is deleted. You can perform custom clean up or prevent the deletion by returning false or throw an exception (preferably EcoObjectDeleteException)</summary>
    partial void PreDelete(ref System.Boolean canDelete);
    
    #endregion *** Constructors ***
    
    #region *** ILoopback implementation ***
    
    [GeneratedCodeAttribute("ECO", "7.0.0.0")]
    public override void set_MemberByIndex(int index, object value) {
      switch(index) {
      case Eco_LoopbackIndices.name:
      this.name = ((string)(value));
        break;
      default:
      base.set_MemberByIndex(index, value);
        break;
      }
    }
    
    [GeneratedCodeAttribute("ECO", "7.0.0.0")]
    public override object get_MemberByIndex(int index) {
      switch(index) {
      case Eco_LoopbackIndices.name:
      return this.name;
      default:
      return base.get_MemberByIndex(index);
      }
    }
    
    #endregion *** ILoopback implementation ***
    
    #region *** LoopbackIndex declarations ***
    
    new public struct Eco_LoopbackIndices {
      
      public const int Eco_FirstMember = App.Model.comm.basetree.Eco_LoopbackIndices.Eco_MemberCount;
      
      public const int name = Eco_FirstMember;
      
      public const int dept_allusers = (name + 1);
      
      public const int dept_manager = (dept_allusers + 1);
      
      public const int Eco_MemberCount = (dept_manager + 1);
    }
    
    #endregion *** LoopbackIndex declarations ***
    
    [UmlElement(Id="2253a612-fe02-4377-a9c4-1cd16d1581f9", Index=Eco_LoopbackIndices.name)]
    [UmlMetaAttribute("initialValue", "new dept")]
    [UmlTaggedValue("Eco.HasUserCode", "True")]
    [GeneratedCodeAttribute("ECO", "7.0.0.0")]
    public string name {
      get {
        this.nameReading();
        string res = ((string)(this.eco_Content.get_MemberByIndex_OfflineAware(Eco_LoopbackIndices.name, typeof(string))));
        this.nameRead(ref res);
        return res;
      }
      set {
        string oldValue = this.name;
        string newValue = value;
        bool abortModification = false;
        this.nameChanging(ref value, ref abortModification);
        if (abortModification) {
          return;
        }
        this.eco_Content.set_MemberByIndex_OfflineAware(Eco_LoopbackIndices.name, ((object)(value)), "name");
        this.nameChanged(oldValue, newValue, value);
      }
    }
    
    [UmlElement("AssociationEnd", Id="8c02c9f7-690d-4c28-9621-c7566b3987ee", Index=Eco_LoopbackIndices.dept_allusers)]
    [UmlMetaAttribute("association", typeof(App.Model.App_ModelPackage.deptmy_deptuserdept_allusers), Index=1)]
    [UmlMetaAttribute("multiplicity", "0..*")]
    [GeneratedCodeAttribute("ECO", "7.0.0.0")]
    public IEcoList<user> dept_allusers {
      get {
        return ((IEcoList<user>)(this.eco_Content.get_MemberByIndex_OfflineAware(Eco_LoopbackIndices.dept_allusers, typeof(IEcoList<user>))));
      }
    }
    
    [UmlElement("AssociationEnd", Id="d411d7cb-948a-46a5-951f-14872f0b9c96", Index=Eco_LoopbackIndices.dept_manager)]
    [UmlMetaAttribute("association", typeof(App.Model.App_ModelPackage.userdept_managerdeptown_dept), Index=1)]
    [UmlMetaAttribute("multiplicity", "0..1")]
    [GeneratedCodeAttribute("ECO", "7.0.0.0")]
    public user dept_manager {
      get {
        return ((user)(this.eco_Content.get_MemberByIndex_OfflineAware(Eco_LoopbackIndices.dept_manager, typeof(user))));
      }
      set {
        this.eco_Content.set_MemberByIndex_OfflineAware(Eco_LoopbackIndices.dept_manager, ((object)(value)), "dept_manager");
      }
    }
    
    #region *** name partial methods ***
    
    /// <summary>This method is called before the attribute name is read</summary>
    partial void nameReading();
    
    /// <summary>This method is called after name is read. It is possible to change the value here.</summary>
    partial void nameRead(ref string value);
    
    /// <summary>This method is called before name is modified, it is possible to change the value that is stored here or abort the modification</summary>
    partial void nameChanging(ref string value, ref bool abortModification);
    
    /// <summary>This method is called after name is modified</summary>
    /// <param name="oldValue">This is the value that name had before the modification</param>
    /// <param name="newValue">This is the value that someone tried to set</param>
    /// <param name="finalValue">This is the value that name has after the modification</param>
    partial void nameChanged(string oldValue, string newValue, string finalValue);
    
    #endregion *** name partial methods ***
  }
}
